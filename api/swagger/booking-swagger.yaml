openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8800
tags:
  - name: auth
    description: Logs in a user.
paths:
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Login an existing user
      description: Login into system
      operationId: login
      requestBody:
        description: Information login
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: The user's username
                  example: su
                password:
                  type: string
                  description: The user's password
                  example: 123
        required: true
      responses:
        200:
          description: "Login successful."
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      isAdmin:
                        type: boolean
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
        404:
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
        403:
          description: "User is forbidden."
        401:
          description: "User is unauthorized."
  /api/auth/register:
    post:
      tags:
        - "auth"
      summary: "Register a new user."
      description: "This endpoint allows users to register new accounts."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "The user's username."
                email:
                  type: string
                  description: "The user's email address."
                password:
                  type: string
                  description: "The user's password."
      responses:
        201:
          description: "User has been created."
        400:
          description: "Bad request."
        500:
          description: "Internal server error."
  /api/hotels:
    get:
      tags:
        - "hotels"
      summary: Get all hotels
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                - id: 1
                  name: "Hotel A"
                  type: "Luxury"
                  city: "City A"
                  address: "Address A"
                  distance: "5 km"
                  photos: ["url1", "url2"]
                  title: "Hotel A Title"
                  desc: "Description of Hotel A"
                  rating: 4.5
                  rooms: ["Room1", "Room2"]
                  cheapestPrice: 150
                  featured: true

    post:
      tags:
        - "hotels"
      summary: Create a new hotel
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The hotel's name."
                type:
                  type: string
                  description: "The hotel's type."
                city:
                  type: string
                  description: "The hotel's city."
                address:
                  type: string
                  description: "The hotel's address."
                distance:
                  type: string
                  description: "The hotel's distance from the city center."
                photos:
                  type: array
                  description: "The hotel's photos."
                title:
                  type: string
                  description: "The hotel's title."
                desc:
                  type: string
                  description: "The hotel's description."
                rating:
                  type: number
                  description: "The hotel's rating."
                rooms:
                  type: array
                  description: "The hotel's rooms."
                cheapestPrice:
                  type: number
                  description: "The hotel's cheapest price."
                featured:
                  type: boolean
                  description: "Whether the hotel is featured."
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                id: 2
                name: "New Hotel"
                type: "Standard"
                city: "City B"
                address: "Address B"
                distance: "3 km"
                photos: ["url3", "url4"]
                title: "New Hotel Title"
                desc: "Description of New Hotel"
                rating: 4.0
                rooms: ["RoomA", "RoomB"]
                cheapestPrice: 120
                featured: false

  /api/hotels/{id}:
    get:
      tags:
        - "hotels"
      summary: Get a specific hotel by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the hotel
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                id: 1
                name: "Hotel A"
                type: "Luxury"
                city: "City A"
                address: "Address A"
                distance: "5 km"
                photos: ["url1", "url2"]
                title: "Hotel A Title"
                desc: "Description of Hotel A"
                rating: 4.5
                rooms: ["Room1", "Room2"]
                cheapestPrice: 150
                featured: true

    put:
      tags:
        - "hotels"
      summary: Update a specific hotel by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the hotel
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              name: "Updated Hotel"
              type: "Luxury"
              city: "City A"
              address: "Updated Address"
              distance: "5 km"
              photos: ["url1", "url2"]
              title: "Updated Hotel Title"
              desc: "Updated Description"
              rating: 4.8
              rooms: ["Room1", "Room2", "Room3"]
              cheapestPrice: 180
              featured: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                id: 1
                name: "Updated Hotel"
                type: "Luxury"
                city: "City A"
                address: "Updated Address"
                distance: "5 km"
                photos: ["url1", "url2"]
                title: "Updated Hotel Title"
                desc: "Updated Description"
                rating: 4.8
                rooms: ["Room1", "Room2", "Room3"]
                cheapestPrice: 180
                featured: true

    delete:
      tags:
        - "hotels"
      summary: Delete a specific hotel by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the hotel
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example: "Hotel with ID 1 has been deleted"
